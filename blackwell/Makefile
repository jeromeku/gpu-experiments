# Source files
# SRC := 00-sanity-check.cu
# SRC := 01-raw-fp8-mm.cu
# SRC := 02-fp8-mm.cu
# SRC := 03-half-raw-fp8-mm.cu
# SRC := 04-tm-ldst-1d-int32.cu
# SRC := 05-tm-alloc.cu
# SRC := 06-tm-ldst-2d-int32.cu
# SRC := 07-tm-cp.cu
# SRC := 08-tm-cp-fp8.cu
# SRC := 09-mxfp8-mm.cu
# SRC := 10-mxfp8-mma.cu
# SRC := 11-fp8-mma-wg-ablation.cu
# SRC := 12-fp8-mma-N-ablation.cu
# SRC := 13-fp8-mma-M-ablation.cu
# SRC := 14-fp8-mma-M-ablation-2.cu
# SRC := 15-fp8-mma-M-ablation-3.cu
# SRC := 16-mxfp8-mma-polished.cu
# SRC := 17-mxfp8-mma-M256.cu
# SRC := 18-mxfp8-quantize.cu
# SRC := 19-smem-swizzle-8b.cu
# SRC := 20-smem-swizzle-16b.cu
# SRC := 21-mxfp8-quantize-opt.cu
# SRC := 22-mxfp8-quantize-opt-2.cu
# SRC := 23-mxfp8-mma-grid-ablation.cu
# SRC := 24-mxfp8-quantize-grid-ablation.cu
# SRC := 27-raw-binding.cu
# SRC := 28-tma-load.cu
# SRC := 29-tma-store.cu
# SRC := 30-tma-load-bandwidth.cu
# SRC := 31-tma-load-store-bandwidth.cu
# SRC := 32-tma-swiz-load.cu
# SRC := 33-tma-swiz-load-bandwidth.cu
# SRC := 34-dma-bandwidth.cu
# SRC := 35-tma-pipeline-bandwidth.cu
# SRC := 36-mxfp8-quantize-opt-3.cu
# SRC := 37-mxfp8-transpose-quantize.cu
# SRC := 38-mxfp8-quantize-combined.cu
# SRC := 39-fp8-mma-2cta.cu
# SRC := 40-fp8-mma-2cta-factored.cu
# SRC := 41-fp8-mma-2cta-M256.cu
# SRC := 42-fp8-mma-2cta-MN128.cu
# SRC := 43-fp8-mma-2cta-MNK128.cu
# SRC := 44-mxfp8-mm-2cta.cu
# SRC := 45-mxfp8-mma-2cta.cu
# SRC := 46-mxfp8-mma-2cta-MNK128.cu
# SRC := 47-mxfp8-mma-2cta-MNK128-polished.cu
# SRC := 48-bf16-matmul-shape-ablation.cu
# SRC := 49-bf16-matmul-launcher-ablation.cu
# SRC := 50-bf16-mha-D128.cu
# SRC := 51-bf16-mha-opt-D128.cu
# SRC := 52-bf16-mha-dsv.cu
# SRC := 53-microbenchmarks.cu
# SRC := 54-multi-node-ib.cu
# SRC := 57-tcgen05-bf16-mma-smallM.cu
# SRC := 58-tensor-ipc.cu
# SRC := 59-tensor-ipc-polished.cu
# SRC := 60-all2all.cu
# SRC := 61-vmm-ipc.cu
# SRC := 62-vmm-ipc-polished.cu
# SRC := 63-parallel-tensor.cu
# SRC := 64-multigpu-sync.cu
# SRC := 65-multimem-all-reduce.cu
# SRC := 67-tma-vs-warp-1.cu
# SRC := 68-tma-vs-warp-2.cu
# SRC := 69-multimem-all-reduce-tma.cu
# SRC := 70-nvlink-bandwidth-copy-engine.cu
# SRC := 71-nvlink-bandwidth-sm.cu
# SRC := 72-nvlink-bandwidth-sm-tma.cu
# SRC := 73-atomic-check.cu
# SRC := 74-faster-comms-sms.cu
# SRC := 75-nvshmem.cu
# SRC := 76-nvshmem-all-reduce.cu
SRC := 81-tma-load-store-irregular.cu

# Binaries
CC := g++
NVCC := nvcc
MPICC := mpicxx
MPIRUN := mpirun

# ThunderKittens configuration
THUNDERKITTENS_ROOT := ../ThunderKittens

# Python binding configuration
# These take a while to load. You can bypass them by defining them as environment variables in advance
PYTHON_VERSION ?= $(shell python3 -c "import sysconfig; print(sysconfig.get_config_var('LDVERSION'))")
PYTHON_INCLUDES ?= $(shell python3 -c "import sysconfig; print('-I', sysconfig.get_path('include'), sep='')")
PYBIND_INCLUDES ?= $(shell python3 -m pybind11 --includes)
PYTORCH_INCLUDES ?= $(shell python3 -c "from torch.utils.cpp_extension import include_paths; print(' '.join(['-I' + p for p in include_paths()]))")
PYTHON_LIBDIR ?= $(shell python3 -c "import sysconfig; print('-L', sysconfig.get_config_var('LIBDIR'), sep='')")
PYTORCH_LIBDIR ?= $(shell python3 -c "from torch.utils.cpp_extension import library_paths; print(' '.join(['-L' + p for p in library_paths()]))")

# NVCC flags (ours)
NVCCFLAGS := -DNDEBUG -lineinfo
NVCCFLAGS += --expt-extended-lambda --expt-relaxed-constexpr 
NVCCFLAGS += -Xcompiler=-Wno-psabi -Xcompiler=-fno-strict-aliasing 
NVCCFLAGS += -forward-unknown-to-host-compiler -ftemplate-backtrace-limit=0
NVCCFLAGS += -std=c++20 -lrt -lpthread -ldl -lcuda -lcudadevrt -lcudart_static
NVCCFLAGS += -O3 --use_fast_math # VERY important to include this flag
NVCCFLAGS += -Xnvlink=--verbose -Xptxas=--verbose -Xptxas=--warn-on-spills 
NVCCFLAGS += -I${THUNDERKITTENS_ROOT}/include -I${THUNDERKITTENS_ROOT}/prototype
NVCCFLAGS+= -DKITTENS_HOPPER -DKITTENS_BLACKWELL -gencode arch=compute_100a,code=sm_100a

# Choose one of the following configurations:

# 1. Standalone configuration
# OUT := $(basename $(SRC)).out
# RUN_CMD := ./$(OUT)

# 2. Python binding configuration
# NVCCFLAGS += -D__CUDA_NO_HALF_OPERATORS__ -D__CUDA_NO_HALF_CONVERSIONS__
# NVCCFLAGS += -D__CUDA_NO_BFLOAT16_CONVERSIONS__ -D__CUDA_NO_HALF2_OPERATORS__
# NVCCFLAGS += -DTORCH_API_INCLUDE_EXTENSION_H
# NVCCFLAGS += $(PYTHON_INCLUDES) $(PYBIND_INCLUDES)
# NVCCFLAGS += -diag-suppress 3189 # for warnings generated by PyTorch C++ headers
# NVCCFLAGS += -shared -fPIC
# NVCCFLAGS += ${PYTHON_LIBDIR} ${PYTORCH_LIBDIR} -lpython${PYTHON_VERSION}
# NVCCFLAGS += -ltorch_python -ltorch_cuda -ltorch_cpu -ltorch -lc10_cuda -lc10
# OUT := _C$(shell python3 -c "import sysconfig; print(sysconfig.get_config_var('EXT_SUFFIX'))")
# RUN_CMD := python3 $(basename $(SRC)).py

# 3. PyTorch binding configuration
NVCCFLAGS += -D__CUDA_NO_HALF_OPERATORS__ -D__CUDA_NO_HALF_CONVERSIONS__
NVCCFLAGS += -D__CUDA_NO_BFLOAT16_CONVERSIONS__ -D__CUDA_NO_HALF2_OPERATORS__
NVCCFLAGS += -DTORCH_API_INCLUDE_EXTENSION_H
NVCCFLAGS += $(PYTHON_INCLUDES) $(PYTORCH_INCLUDES) $(PYBIND_INCLUDES)
NVCCFLAGS += -diag-suppress 3189 # for warnings generated by PyTorch C++ headers
NVCCFLAGS += -shared -fPIC
NVCCFLAGS += ${PYTHON_LIBDIR} ${PYTORCH_LIBDIR} -lpython${PYTHON_VERSION}
NVCCFLAGS += -ltorch_python -ltorch_cuda -ltorch_cpu -ltorch -lc10_cuda -lc10
NVCCFLAGS += -DTORCH_EXTENSION_NAME=_C # replicate setup.py behavior
OUT := _C$(shell python3 -c "import sysconfig; print(sysconfig.get_config_var('EXT_SUFFIX'))")
RUN_CMD := python3 $(basename $(SRC)).py

# 4. PyTorch + Torchrun binding configuration
# NVCCFLAGS += -D__CUDA_NO_HALF_OPERATORS__ -D__CUDA_NO_HALF_CONVERSIONS__
# NVCCFLAGS += -D__CUDA_NO_BFLOAT16_CONVERSIONS__ -D__CUDA_NO_HALF2_OPERATORS__
# NVCCFLAGS += -DTORCH_API_INCLUDE_EXTENSION_H
# NVCCFLAGS += $(PYTHON_INCLUDES) $(PYTORCH_INCLUDES) $(PYBIND_INCLUDES)
# NVCCFLAGS += -diag-suppress 3189 # for warnings generated by PyTorch C++ headers
# NVCCFLAGS += -shared -fPIC
# NVCCFLAGS += ${PYTHON_LIBDIR} ${PYTORCH_LIBDIR} -lpython${PYTHON_VERSION}
# NVCCFLAGS += -ltorch_python -ltorch_cuda -ltorch_cpu -ltorch -lc10_cuda -lc10
# NVCCFLAGS += -DTORCH_EXTENSION_NAME=_C # replicate setup.py behavior
# OUT := _C$(shell python3 -c "import sysconfig; print(sysconfig.get_config_var('EXT_SUFFIX'))")
# RUN_CMD := OMP_NUM_THREADS=1 torchrun --nproc_per_node=8 $(basename $(SRC)).py

# 5. MPI configuration
# NVCCFLAGS += -ccbin ${MPICC}
# OUT := $(basename $(SRC)).out
# RUN_CMD := $(MPIRUN) -np 8 ./$(OUT)

# 6. NVSHMEM configuration
# NVCCFLAGS += -ccbin ${MPICC}
# NVCCFLAGS += -rdc=true
# NVCCFLAGS += -I/usr/include/nvshmem_12/ -L/usr/lib/x86_64-linux-gnu/nvshmem/12 -lnvshmem_host -lnvshmem_device
# NVCCFLAGS += -diag-suppress 3013 -diag-suppress 3012
# OUT := $(basename $(SRC)).out
# RUN_CMD := $(MPIRUN) -np 8 ./$(OUT)

all: $(OUT)

ptx: $(SRC)
	$(NVCC) $(SRC) $(NVCCFLAGS) --ptx -o $(basename $(SRC)).ptx

run: $(OUT)
	$(RUN_CMD)

$(OUT): $(SRC)
	$(NVCC) $(SRC) $(NVCCFLAGS) -o $(OUT)

clean:
	rm -f $(OUT) $(basename $(SRC)).ptx $(basename $(SRC)).out
